{"ast":null,"code":"var _jsxFileName = \"/Users/jcdev/Projects/weatherapp/src/body/googleMap/GoogleMap.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport \"\";\n\nconst AnyReactComponent = ({\n  text\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5\n  },\n  __self: this\n}, React.createElement(\"img\", {\n  style: {\n    height: \"40px\"\n  },\n  src: \"https://image.flaticon.com/icons/svg/1329/1329665.svg\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5\n  },\n  __self: this\n}));\n\nconst handleApiLoaded = (map, maps) => {// use map and maps objects\n};\n\nvar map;\nvar geoJSON;\nvar request;\nvar gettingData = false;\nvar openWeatherMapKey = \"ABC...\";\nvar infowindow = new google.maps.InfoWindow();\n\nclass SimpleMap extends Component {\n  initialize() {\n    var mapOptions = {\n      zoom: 4,\n      center: new google.maps.LatLng(50, -50)\n    };\n    map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions); // Add interaction listeners to make weather requests\n\n    google.maps.event.addListener(map, 'idle', checkIfDataRequested); // Sets up and populates the info window with details\n\n    map.data.addListener('click', function (event) {\n      infowindow.setContent(\"<img src=\" + event.feature.getProperty(\"icon\") + \">\" + \"<br /><strong>\" + event.feature.getProperty(\"city\") + \"</strong>\" + \"<br />\" + event.feature.getProperty(\"temperature\") + \"&deg;C\" + \"<br />\" + event.feature.getProperty(\"weather\"));\n      infowindow.setOptions({\n        position: {\n          lat: event.latLng.lat(),\n          lng: event.latLng.lng()\n        },\n        pixelOffset: {\n          width: 0,\n          height: -15\n        }\n      });\n      infowindow.open(map);\n    });\n  }\n\n  checkIfDataRequested() {\n    // Stop extra requests being sent\n    while (gettingData === true) {\n      request.abort();\n      gettingData = false;\n    }\n\n    getCoords();\n  }\n\n  // Get the coordinates from the Map bounds\n  getCoords() {\n    var bounds = map.getBounds();\n    var NE = bounds.getNorthEast();\n    var SW = bounds.getSouthWest();\n    getWeather(NE.lat(), NE.lng(), SW.lat(), SW.lng());\n  }\n\n  // Make the weather request\n  getWeather(northLat, eastLng, southLat, westLng) {\n    gettingData = true;\n    var requestString = \"http://api.openweathermap.org/data/2.5/box/city?bbox=\" + westLng + \",\" + northLat + \",\" //left top\n    + eastLng + \",\" + southLat + \",\" //right bottom\n    + map.getZoom() + \"&cluster=yes&format=json\" + \"&APPID=\" + openWeatherMapKey;\n    request = new XMLHttpRequest();\n    request.onload = proccessResults;\n    request.open(\"get\", requestString, true);\n    request.send();\n  }\n\n  // Take the JSON results and proccess them\n  proccessResults() {\n    console.log(this);\n    var results = JSON.parse(this.responseText);\n\n    if (results.list.length > 0) {\n      resetData();\n\n      for (var i = 0; i < results.list.length; i++) {\n        geoJSON.features.push(jsonToGeoJson(results.list[i]));\n      }\n\n      drawIcons(geoJSON);\n    }\n  }\n\n  // For each result that comes back, convert the data to geoJSON\n  jsonToGeoJson(weatherItem) {\n    var feature = {\n      type: \"Feature\",\n      properties: {\n        city: weatherItem.name,\n        weather: weatherItem.weather[0].main,\n        temperature: weatherItem.main.temp,\n        min: weatherItem.main.temp_min,\n        max: weatherItem.main.temp_max,\n        humidity: weatherItem.main.humidity,\n        pressure: weatherItem.main.pressure,\n        windSpeed: weatherItem.wind.speed,\n        windDegrees: weatherItem.wind.deg,\n        windGust: weatherItem.wind.gust,\n        icon: \"http://openweathermap.org/img/w/\" + weatherItem.weather[0].icon + \".png\",\n        coordinates: [weatherItem.coord.Lon, weatherItem.coord.Lat]\n      },\n      geometry: {\n        type: \"Point\",\n        coordinates: [weatherItem.coord.Lon, weatherItem.coord.Lat]\n      }\n    }; // Set the custom marker icon\n\n    map.data.setStyle(function (feature) {\n      return {\n        icon: {\n          url: feature.getProperty('icon'),\n          anchor: new google.maps.Point(25, 25)\n        }\n      };\n    }); // returns object\n\n    return feature;\n  }\n\n  // Add the markers to the map\n  drawIcons(weather) {\n    map.data.addGeoJson(geoJSON); // Set the flag to finished\n\n    gettingData = false;\n  }\n\n  // Clear data layer and geoJSON\n  resetData() {\n    geoJSON = {\n      type: \"FeatureCollection\",\n      features: []\n    };\n    map.data.forEach(function (feature) {\n      map.data.remove(feature);\n    });\n  }\n\n}\n\nexport default SimpleMap;","map":{"version":3,"sources":["/Users/jcdev/Projects/weatherapp/src/body/googleMap/GoogleMap.js"],"names":["React","Component","GoogleMapReact","AnyReactComponent","text","height","handleApiLoaded","map","maps","geoJSON","request","gettingData","openWeatherMapKey","infowindow","google","InfoWindow","SimpleMap","initialize","mapOptions","zoom","center","LatLng","Map","document","getElementById","event","addListener","checkIfDataRequested","data","setContent","feature","getProperty","setOptions","position","lat","latLng","lng","pixelOffset","width","open","abort","getCoords","bounds","getBounds","NE","getNorthEast","SW","getSouthWest","getWeather","northLat","eastLng","southLat","westLng","requestString","getZoom","XMLHttpRequest","onload","proccessResults","send","console","log","results","JSON","parse","responseText","list","length","resetData","i","features","push","jsonToGeoJson","drawIcons","weatherItem","type","properties","city","name","weather","main","temperature","temp","min","temp_min","max","temp_max","humidity","pressure","windSpeed","wind","speed","windDegrees","deg","windGust","gust","icon","coordinates","coord","Lon","Lat","geometry","setStyle","url","anchor","Point","addGeoJson","forEach","remove"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport \"\"\n\nconst AnyReactComponent = ({ text }) => <div ><img style={{height:\"40px\"}}  src=\"https://image.flaticon.com/icons/svg/1329/1329665.svg\"/></div>;\nconst handleApiLoaded = (map, maps) => {\n  // use map and maps objects\n};\nvar map;\nvar geoJSON;\nvar request;\nvar gettingData = false;\nvar openWeatherMapKey = \"ABC...\"\nvar infowindow = new google.maps.InfoWindow();\nclass SimpleMap extends Component {\n\n   initialize() {\n    var mapOptions = {\n      zoom: 4,\n      center: new google.maps.LatLng(50,-50)\n    };\n\n    map = new google.maps.Map(document.getElementById('map-canvas'),\n        mapOptions);\n    // Add interaction listeners to make weather requests\n    google.maps.event.addListener(map, 'idle', checkIfDataRequested);\n    // Sets up and populates the info window with details\n    map.data.addListener('click', function(event) {\n      infowindow.setContent(\n       \"<img src=\" + event.feature.getProperty(\"icon\") + \">\"\n       + \"<br /><strong>\" + event.feature.getProperty(\"city\") + \"</strong>\"\n       + \"<br />\" + event.feature.getProperty(\"temperature\") + \"&deg;C\"\n       + \"<br />\" + event.feature.getProperty(\"weather\")\n       );\n      infowindow.setOptions({\n          position:{\n            lat: event.latLng.lat(),\n            lng: event.latLng.lng()\n          },\n          pixelOffset: {\n            width: 0,\n            height: -15\n          }\n        });\n      infowindow.open(map);\n    });\n  }\n  checkIfDataRequested () {\n    // Stop extra requests being sent\n    while (gettingData === true) {\n      request.abort();\n      gettingData = false;\n    }\n    getCoords();\n  };\n  // Get the coordinates from the Map bounds\n  getCoords () {\n    var bounds = map.getBounds();\n    var NE = bounds.getNorthEast();\n    var SW = bounds.getSouthWest();\n    getWeather(NE.lat(), NE.lng(), SW.lat(), SW.lng());\n  };\n  // Make the weather request\n   getWeather (northLat, eastLng, southLat, westLng) {\n    gettingData = true;\n    var requestString = \"http://api.openweathermap.org/data/2.5/box/city?bbox=\"\n                        + westLng + \",\" + northLat + \",\" //left top\n                        + eastLng + \",\" + southLat + \",\" //right bottom\n                        + map.getZoom()\n                        + \"&cluster=yes&format=json\"\n                        + \"&APPID=\" + openWeatherMapKey;\n    request = new XMLHttpRequest();\n    request.onload = proccessResults;\n    request.open(\"get\", requestString, true);\n    request.send();\n  };\n  // Take the JSON results and proccess them\n   proccessResults () {\n    console.log(this);\n    var results = JSON.parse(this.responseText);\n    if (results.list.length > 0) {\n        resetData();\n        for (var i = 0; i < results.list.length; i++) {\n          geoJSON.features.push(jsonToGeoJson(results.list[i]));\n        }\n        drawIcons(geoJSON);\n    }\n  };\n\n  // For each result that comes back, convert the data to geoJSON\n  jsonToGeoJson  (weatherItem) {\n    var feature = {\n      type: \"Feature\",\n      properties: {\n        city: weatherItem.name,\n        weather: weatherItem.weather[0].main,\n        temperature: weatherItem.main.temp,\n        min: weatherItem.main.temp_min,\n        max: weatherItem.main.temp_max,\n        humidity: weatherItem.main.humidity,\n        pressure: weatherItem.main.pressure,\n        windSpeed: weatherItem.wind.speed,\n        windDegrees: weatherItem.wind.deg,\n        windGust: weatherItem.wind.gust,\n        icon: \"http://openweathermap.org/img/w/\"\n              + weatherItem.weather[0].icon  + \".png\",\n        coordinates: [weatherItem.coord.Lon, weatherItem.coord.Lat]\n      },\n      geometry: {\n        type: \"Point\",\n        coordinates: [weatherItem.coord.Lon, weatherItem.coord.Lat]\n      }\n    };\n    // Set the custom marker icon\n    map.data.setStyle(function(feature) {\n      return {\n        icon: {\n          url: feature.getProperty('icon'),\n          anchor: new google.maps.Point(25, 25)\n        }\n      };\n    });\n    // returns object\n    return feature;\n  };\n  // Add the markers to the map\n  drawIcons (weather) {\n     map.data.addGeoJson(geoJSON);\n     // Set the flag to finished\n     gettingData = false;\n  };\n  // Clear data layer and geoJSON\n   resetData  () {\n    geoJSON = {\n      type: \"FeatureCollection\",\n      features: []\n    };\n    map.data.forEach(function(feature) {\n      map.data.remove(feature);\n    });\n  };\n}\n\nexport default SimpleMap;\n"]},"metadata":{},"sourceType":"module"}