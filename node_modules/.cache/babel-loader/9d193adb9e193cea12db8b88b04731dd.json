{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nvar fetchData = require('../fetchData');\n\nvar extractFetchData = function extractFetchData(component, _ref) {\n  var match = _ref.match,\n      req = _ref.req,\n      res = _ref.res;\n  var requiresData = component.fetchData;\n  var ssrWaitsFor = component.ssrWaitsFor;\n\n  if (requiresData || ssrWaitsFor) {\n    return fetchData(component, match, req, res);\n  }\n};\n\nvar checkRoute = function checkRoute(options) {\n  var route = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var routeCalls = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var components = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n  if (route.routes) {\n    var childCalls = route.routes.map(function (route) {\n      if (route && route.path && route.path.includes(options.url)) {\n        var result = checkRoute(options, route, routeCalls, components) || [];\n        components.concat(result.components);\n        return result.routeCalls || [];\n      }\n    });\n    routeCalls = routeCalls.concat(childCalls);\n  }\n\n  if (route.component) {\n    routeCalls.push(extractFetchData(route.component, options));\n  }\n\n  return {\n    routeCalls: routeCalls,\n    components: components\n  };\n};\n\nvar flatten = function flatten(arr) {\n  var _ref2;\n\n  return Array.isArray(arr) ? (_ref2 = []).concat.apply(_ref2, _toConsumableArray(arr.map(flatten))) : arr;\n};\n\nvar findAllDataCalls = function findAllDataCalls() {\n  var matchedRoutes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var promises = [];\n  matchedRoutes.forEach(function (matchedRoute) {\n    var _checkRoute = checkRoute(_extends({}, options, {\n      match: matchedRoute.match\n    }), matchedRoute.route),\n        _checkRoute$routeCall = _checkRoute.routeCalls,\n        routeCalls = _checkRoute$routeCall === undefined ? [] : _checkRoute$routeCall;\n\n    promises = promises.concat(routeCalls);\n  });\n  var flattenedPromises = flatten(promises).filter(function (promise) {\n    return typeof promise !== 'undefined';\n  });\n  return flattenedPromises;\n};\n\nmodule.exports = findAllDataCalls;","map":null,"metadata":{},"sourceType":"script"}